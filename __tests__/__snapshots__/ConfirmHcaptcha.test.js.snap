// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConfirmHcaptcha snapshot tests renders ConfirmHcaptcha with minimum props 1`] = `
<Modal
  animationIn="fadeIn"
  animationOut="fadeOut"
  deviceHeight={1334}
  deviceWidth={750}
  hasBackdrop={true}
  hideModalContentWhileAnimating={true}
  isVisible={false}
  onBackButtonPress={[Function]}
  onBackdropPress={[Function]}
  style={
    Array [
      Object {
        "display": "none",
        "margin": 0,
      },
      Object {
        "display": undefined,
      },
    ]
  }
  useNativeDriver={true}
>
  <RCTSafeAreaView
    emulateUnlessSupported={true}
    style={
      Array [
        Object {
          "flex": 1,
          "justifyContent": "center",
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "rgba(0, 0, 0, 0.3)",
        },
      ]
    }
  >
    <WebView
      automaticallyAdjustContentInsets={true}
      injectedJavaScript="(function () {
  var originalPostMessage = window.ReactNativeWebView.postMessage;

  var patchedPostMessage = function patchedPostMessage(message, targetOrigin, transfer) {
    originalPostMessage(message, targetOrigin, transfer);
  };

  patchedPostMessage.toString = function () {
    return String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage');
  };

  window.ReactNativeWebView.postMessage = patchedPostMessage;
})();"
      javaScriptEnabled={true}
      mixedContentMode="always"
      onShouldStartLoadWithRequest={[Function]}
      originWhitelist={
        Array [
          "*",
        ]
      }
      renderLoading={[Function]}
      source={
        Object {
          "baseUrl": "https://hcaptcha.com",
          "html": "<!DOCTYPE html>
      <html>
      <head>
        <meta charset=\\"UTF-8\\">
        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
        <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\">
        <script type=\\"text/javascript\\">
          [\\"test_key\\"].forEach(function (value, i) { window[value] = true; });
        </script>
        <script src=\\"https://hcaptcha.com/1/api.js?render=explicit&onload=onloadCallback&host=00000000-0000-0000-0000-000000000000.react-native.hcaptcha.com&hl=en\\" async defer></script>
        <script type=\\"text/javascript\\">
          var onloadCallback = function() {
            try {
              console.log(\\"challenge onload starting\\");
              hcaptcha.render(\\"submit\\", getRenderConfig(\\"00000000-0000-0000-0000-000000000000\\", \\"light\\"));
              // have loaded by this point; render is sync.
              console.log(\\"challenge render complete\\");
            } catch (e) {
              console.log(\\"challenge failed to render\\");
              window.ReactNativeWebView.postMessage(\\"error\\");
            }
            try {
              console.log(\\"showing challenge\\");
              hcaptcha.execute(getExecuteOpts());
            } catch (e) {
              console.log(\\"failed to show challenge\\");
              window.ReactNativeWebView.postMessage(\\"error\\");
            }
          };
          var onDataCallback = function(response) {
            window.ReactNativeWebView.postMessage(response);
          };
          var onCancel = function() {
            window.ReactNativeWebView.postMessage(\\"cancel\\");
          };
          var onOpen = function() {
            // NOTE: disabled for simplicity.
            // window.ReactNativeWebView.postMessage(\\"open\\");
            console.log(\\"challenge opened\\");
          };
          var onDataExpiredCallback = function(error) { window.ReactNativeWebView.postMessage(\\"expired\\"); };
          var onChalExpiredCallback = function(error) { window.ReactNativeWebView.postMessage(\\"cancel\\"); };
          var onDataErrorCallback = function(error) {
            console.log(\\"challenge error callback fired\\");
            window.ReactNativeWebView.postMessage(\\"error\\");
          };
          const getRenderConfig = function(siteKey, theme) {
            var config = {
              sitekey: siteKey,
              size: \\"invisible\\",
              callback: onDataCallback,
              \\"close-callback\\": onCancel,
              \\"open-callback\\": onOpen,
              \\"expired-callback\\": onDataExpiredCallback,
              \\"chalexpired-callback\\": onChalExpiredCallback,
              \\"error-callback\\": onDataErrorCallback
            };
            if (theme) {
              config.theme = theme;
            }
            return config;
          };
          const getExecuteOpts = function() {
            var opts;
            const rqdata = null;
            if (rqdata) {
              opts = {\\"rqdata\\": rqdata};
            }
            return opts;
          };
        </script>
      </head>
      <body style=\\"background-color: rgba(0, 0, 0, 0.3);\\">
        <div id=\\"submit\\"></div>
      </body>
      </html>",
        }
      }
      startInLoadingState={false}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "width": "100%",
          },
          undefined,
        ]
      }
    />
  </RCTSafeAreaView>
</Modal>
`;
