// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Hcaptcha snapshot tests renders Hcaptcha with minimum props 1`] = `
<WebView
  automaticallyAdjustContentInsets={true}
  injectedJavaScript="(function () {
  var originalPostMessage = window.ReactNativeWebView.postMessage;

  var patchedPostMessage = function patchedPostMessage(message, targetOrigin, transfer) {
    originalPostMessage(message, targetOrigin, transfer);
  };

  patchedPostMessage.toString = function () {
    return String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage');
  };

  window.ReactNativeWebView.postMessage = patchedPostMessage;
})();"
  javaScriptEnabled={true}
  mixedContentMode="always"
  onShouldStartLoadWithRequest={[Function]}
  originWhitelist={
    Array [
      "*",
    ]
  }
  renderLoading={[Function]}
  source={
    Object {
      "baseUrl": "https://hcaptcha.com",
      "html": "<!DOCTYPE html>
			<html>
			<head> 
				<meta charset=\\"UTF-8\\"><meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
				<meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\"> 
				<script src=\\"https://hcaptcha.com/1/api.js?render=explicit&onload=onloadCallback&hl=en&host=missing-sitekey.react-native.hcaptcha.com\\" async defer></script> 
				<script type=\\"text/javascript\\"> 
				var onloadCallback = function() {
			        try {
			          console.log(\\"challenge onload starting\\");
			          hcaptcha.render(\\"submit\\", {
			            sitekey: \\"\\",
			            size: \\"invisible\\",
			            \\"callback\\": onDataCallback,
			            \\"close-callback\\": onCancel,
			            \\"open-callback\\": onOpen,
			            \\"expired-callback\\": onDataExpiredCallback,
			            \\"chalexpired-callback\\": onChalExpiredCallback,
			            \\"error-callback\\": onDataErrorCallback
			          });
			          // have loaded by this point; render is sync.
			          console.log(\\"challenge render complete\\");
			        } catch (e) {
			          console.log(\\"challenge failed to render\\");
					  window.ReactNativeWebView.postMessage(\\"error\\");
			        }

			        try {
			          console.log(\\"showing challenge\\");
			          hcaptcha.execute();
			        } catch (e) {
			          console.log(\\"failed to show challenge\\");
					  window.ReactNativeWebView.postMessage(\\"error\\");
			        }

				};  
				var onDataCallback = function(response) {
					window.ReactNativeWebView.postMessage(response);  
				};  
				var onCancel = function() {
					window.ReactNativeWebView.postMessage(\\"cancel\\"); 
				}
				var onOpen = function() {
					// NOTE: disabled for simplicity.
					// window.ReactNativeWebView.postMessage(\\"open\\");
					console.log(\\"challenge opened\\");
				}
				var onDataExpiredCallback = function(error) {  window.ReactNativeWebView.postMessage(\\"expired\\"); };
				var onChalExpiredCallback = function(error) {  window.ReactNativeWebView.postMessage(\\"cancel\\"); };
				var onDataErrorCallback = function(error) {
					console.log(\\"challenge error callback fired\\");
					window.ReactNativeWebView.postMessage(\\"error\\");
				}
				</script>
			</head>
			<body style=\\"background-color: undefined;\\"> 
			    <div id=\\"submit\\"></div>
			</body>
	    </html>",
    }
  }
  startInLoadingState={false}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
        "width": "100%",
      },
      undefined,
    ]
  }
/>
`;
